Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-11-22T19:53:37+01:00

====== a.Merging ======
Created Sunday 22 November 2015	# [[a.Merging]]

===== Merging =====
	* **Merging** in Git is the process of **joining** two histories - usually branches - together. 
	* Say you have created a new ''feature-branch'' from ''master'', and done some work on it.
	* At the same time, you need to fix an urgent bug. So you create a ''hotfix'' branch from ''master'', and do some work in there. At this point, the history will look something like this.
	{{./pasted_image.png?height=200}}


===== Fast-forward merge =====
	* Now you want to bring the **bug fix into master** so that you can tag it and release it.
		{{./pasted_image002.png}}
	* Notice how Git mentions **fast-forward** during the merge. What this means is that all of the commits in ''hotfix'' were directly upstream from ''master''. This allows Git to simply move the ''master'' pointer up the tree to ''hotfix''. What you end up with looks like this.
	{{./pasted_image003.png?height=200}}
	

===== Merge commit, multiple parents =====
	* Now let’s try and merge **feature-branch into master**.
		{{./pasted_image004.png}}
	* This time, Git wasn't able to perform a fast-forward. This is because ''feature-branch'' isn't directly upstream from ''master''. This is clear on the graph above, where ''master'' is at commit **D** which is in a different history tree to ''feature-branch'' at commit **C**.
	* So how did Git handle this merge? Taking a look at the log, we see that Git has actually created a new **merge commit**, as well as bringing the commit from ''feature-branch''.
	* Upon closer inspection, we can see that this is a special kind of commit object – it has **two parent commits**. This is referred to as a **merge commit**.
	* This means that our history graph now looks something like this (commit **E** is the new merge commit).

	{{./pasted_image005.png?width=600}}
