Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-11-22T20:27:47+01:00

====== b.CherryPick ======
Created Sunday 22 November 2015

===== Cherry-pick =====
	* What git ''cherry-pick'' does is take **one** or **more** **commits**, and **replay** them on top of the **current commit**. Imagine a repository with the following history graph.
	{{./pasted_image.png?width=390}}
	* If you are on commit **D** and you run ''git cherry-pick F'', Git will take the changes that were introduced in commit **F** and replay them __as a new commit__ (shown as **F'**) on top of commit **D**.
	{{./pasted_image001.png?width=440}}


===== Common workflow =====
	* A **common workflow** in Git is to develop **features on small branche**s, and merge the features **one at a time** into the master branch.
	{{./pasted_image002.png?width=500}}
	* As it stands ''master'' has been updated since ''foo'' was created.
	* We want to avoid potential conflicts when ''foo'' and ''master'' are merged at some time in future. Therefore these two branches shall **not diverge** too much.
	* Because ''master'' is the base branch, we want to play ''foo'''s commits on top of ''master''. Essentially, we want to change commit **C**'s **parent** from **B** to **F**.
	* We can achieve this with ''git cherry-pick''. First, we need to create a temporary branch at commit **F**.
		{{./pasted_image003.png}}
	{{./pasted_image004.png?width=500}}
	* Now that we have a base on commit **F**, we can ''git cherry-pick'' all of ''foo'''s commits on top of it.	
		{{./pasted_image006.png}}
	{{./pasted_image007.png?width=600}}
	* Now all that's left to do is point ''foo'' at commit **D'**, and __delete__ the __temporary branch__ ''foo-tmp''. We do this with the ''git reset'' command, which points **HEAD** (and therefore the **current branch**) at a specified commit. The ''--hard'' flag ensures our working tree is updated as well.
		{{./pasted_image008.png}}
	* This gives the desired result of ''foo'''s commits being upstream of ''master''. Note that the original **C** and **D** commits are no longer __reachable__ because no branch points to them.

	{{./pasted_image009.png?width=600}}
	
	â€¢ Note: Another way to achieve the wanted result is by renaming:
'''
# ===== renaming branches
git branch -m foo     foo.Obsolete    # 1) rename foo to foo.Obsolete
git branch -m foo-tmp foo             # 2) rename foo-tmp to foo
git branch -D foo.Obsolete            # 3) delete foo.Obsolete
#..
'''

